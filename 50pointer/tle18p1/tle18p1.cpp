#include <bits/stdc++.h>
//using namespace std;
template<typename T> using vector = std::vector<T>;

#define TRAIN 0


#ifdef __DEBUG
#include "mnist/mnist.h"
#endif


#if 0
#define M 28
#define N 784
#else
#define M 14
#define N 197
#endif




double Mat[N][N];
double Vec[N];

void clearMat() {
	for (int i = 0; i < N; i++) for (int j = 0; j < N; j++) Mat[i][j] = 0.;
	for (int i = 0; i < N; i++) Vec[i] = 0.;
}
#if 1
void addTestCase(const double x[], double y) {
	for (int i = 0; i < N; i++) for (int j = 0; j < N; j++) Mat[i][j] += x[i] * x[j];
	for (int i = 0; i < N; i++) Vec[i] += x[i] * y;
}
#else
void addTestCase(const double x[], double y) {
	for (int i = 0; i < N; i++) Mat[i][i] += y;
	for (int i = 0; i < N; i++) Vec[i] += x[i] * y;
}
#endif
void solveSystem() {
	for (int i = 0; i < N; i++) {
		double m = 1.0 / Mat[i][i];
		for (int k = i; k < N; k++) Mat[i][k] *= m;
		Vec[i] *= m;
		for (int j = 0; j < N; j++) if (j != i) {
			double m = -Mat[j][i] / Mat[i][i];
			for (int k = i; k < N; k++) Mat[j][k] += m * Mat[i][k];
			Vec[j] += m * Vec[i];
		}
	}
}





#if TRAIN

int main() {
	std::vector<mnist_img> mnist[10];
	for (int d = 0; d < 10; d++) {
		loadData(MNIST_TRAIN_FILES[d], mnist[d]);
		/*for (int i = 0; i < M; i++) {
		for (int j = 0; j < M; j++) {
		printf("%lf ", mnist[d][0].data[i][j]);
		}
		printf("\n");
		}*/
	}


	freopen("stdout.dat", "w", stdout);

	for (int D = 0; D < 10; D++) {
		fprintf(stderr, "%d\n", D);

		clearMat();
		for (int d = 0; d < 10; d++) {
			int TN = mnist[d].size();
			double data[N];
			for (int i = 0; i < TN; i++) {
				for (int u = 0; u < M*M; u++) data[u] = (&mnist[d][i].data[0][0])[u];
				if (N & 1) data[N - 1] = 1.;
				addTestCase(data, d == D ? 1. : 0.);
			}
		}
		solveSystem();

		mnist_img filter;
		for (int i = 0; i < M*M; i++) (&filter.data[0][0])[i] = Vec[i];
		writeImage(&(std::string("D:\\") + char(D + '0') + ".png")[0], filter.data);
		printf("{"); for (int i = 0; i < N; i++) printf("%.4lf,", Vec[i]); printf("},\n");

	}
	return 0;
}



#else  // TRAIN



const double S[10][N] = {
	{-0.3021,-0.6755,-0.0491,0.0660,-0.1499,-0.0660,0.0311,-0.0455,0.0078,-0.0534,-0.0146,-0.0724,0.3264,-0.6782,-0.2985,-0.4115,-0.3343,0.0626,-0.0740,-0.0005,-0.0026,-0.0441,-0.0804,-0.1260,-0.1182,-0.1121,0.0333,-0.4829,-0.0885,0.0048,-0.0451,-0.0021,-0.0467,-0.0533,0.0100,0.0131,0.0012,-0.0007,-0.0064,-0.0953,-0.0785,-0.5164,-0.7331,-0.0095,-0.0014,0.0069,-0.0084,-0.0096,0.0328,0.0281,0.0330,0.0226,-0.0052,-0.0125,-0.1629,-0.0743,-0.0269,-0.0113,-0.0074,0.0177,0.0124,-0.0073,0.0135,0.0703,0.0506,0.0415,0.0178,0.0114,-0.2027,-0.2164,0.1651,-0.0501,-0.0301,-0.0044,0.0157,0.0157,0.0128,-0.0214,0.0085,0.0572,0.0942,0.0927,-0.0532,-0.7973,-0.0808,-0.0080,-0.0755,0.0143,0.0041,0.0257,-0.0533,-0.1072,-0.0681,-0.0835,0.0017,0.1688,0.1053,-0.4652,0.0877,-0.1355,0.0302,0.0340,0.0690,0.0366,-0.0824,-0.0367,-0.0896,-0.0612,0.0616,0.0302,-0.0411,-0.4194,-0.6199,-0.2271,0.0493,0.0396,0.0398,-0.0028,-0.0863,-0.0950,-0.0591,0.0250,-0.0036,-0.0051,0.0273,0.0019,-1.1249,-0.1201,-0.0180,0.0542,0.0403,0.0043,-0.0049,-0.0164,0.0039,-0.0107,-0.0168,-0.0102,-0.0210,-0.2385,-0.6015,-0.0106,0.0069,-0.0165,0.0260,0.0386,0.0117,0.0083,-0.0223,-0.0180,0.0124,-0.0361,0.0316,0.2000,-0.5263,-0.0159,-0.0611,0.0338,0.0118,0.0324,0.0439,0.0349,0.0168,-0.0205,-0.0353,0.0164,0.0048,-0.4619,-0.2742,0.1241,-0.0486,-0.0563,-0.0560,-0.0586,-0.0582,-0.0317,-0.0086,0.0084,0.0008,-0.0569,-0.2371,0.4836,-0.1265,0.2914,-0.0934,-0.1411,-0.2070,-0.1415,-0.1427,-0.1543,-0.1318,-0.0989,-0.0913,-0.3449,-0.6364,-0.2144,0.1788,},
{-0.2375,-0.7681,-0.8429,-0.3856,-0.5028,-0.2357,-0.1511,-0.0740,-0.0545,-0.1685,-0.0606,-0.6565,0.0408,0.0349,0.3361,0.6681,0.0563,0.0370,-0.0582,-0.0237,-0.0187,-0.0581,-0.0482,-0.0881,-0.1555,-0.1200,-0.2337,-0.1689,-0.8902,0.1809,-0.1084,-0.0415,-0.0473,-0.0727,0.0008,0.0014,-0.0116,0.0279,0.0496,0.0076,-0.1367,-0.2501,-0.9095,-0.0939,-0.0022,-0.0207,-0.0486,-0.0497,-0.0019,-0.0116,-0.0228,0.0329,0.0135,-0.0132,-0.0383,-0.1234,-0.1866,0.0323,-0.0218,-0.0077,-0.0125,-0.0611,-0.0015,0.0365,0.0271,0.0051,-0.0296,-0.0099,-0.1114,-0.1874,-0.2045,0.0036,-0.0147,-0.0058,-0.0054,-0.0494,-0.0725,0.1770,-0.0830,0.0000,-0.0151,0.0168,-0.0371,-0.3740,-0.4495,-0.0100,-0.0354,0.0143,-0.0008,-0.0444,-0.1308,0.2519,-0.1531,0.0514,0.0018,0.0381,-0.0285,-0.7379,-0.8394,0.0297,-0.0034,-0.0215,0.0227,-0.1011,0.0216,0.1075,-0.1096,0.0351,-0.0143,-0.0000,0.0011,-0.5715,-0.6094,-0.1219,-0.0155,-0.0003,0.0076,-0.0906,0.0898,0.0317,-0.0596,-0.0109,0.0035,0.0259,-0.0519,-0.4643,-0.7423,0.0052,-0.0402,-0.0360,-0.0213,-0.0264,0.0920,0.0013,-0.0439,-0.0053,0.0086,-0.0157,-0.0614,-0.2738,-0.7254,0.0003,-0.0535,-0.0415,-0.0022,0.0085,-0.0018,0.0368,-0.0381,-0.0413,-0.0053,0.0154,-0.0414,-0.0033,-0.6843,-0.1051,-0.0014,0.0197,0.0400,-0.0229,-0.0473,0.0375,0.0654,-0.0136,-0.0064,-0.0455,0.0829,-0.3921,-0.2153,0.1161,-0.1111,-0.0587,-0.0843,-0.0489,-0.0345,-0.0648,-0.0340,0.0249,-0.0109,0.0169,-0.1187,0.1003,0.1279,-0.1348,-0.2696,-0.1644,-0.0681,-0.0120,-0.0483,-0.0422,-0.0563,-0.1103,-0.0842,-0.6343,-0.8472,-0.1329,0.3107,},
{-0.9556,0.4058,0.3395,-0.3766,-0.5639,-0.3209,-0.4974,-0.3047,-0.1348,-0.5458,0.2319,0.6043,0.6124,-0.3552,-0.1828,-0.4000,-0.2211,-0.0249,0.0461,0.0138,-0.0087,-0.0554,-0.0698,-0.1236,-0.1085,-0.1984,0.0619,-0.5683,0.4075,-0.1961,0.0535,0.0058,0.0373,0.0822,0.0744,0.0593,0.0605,0.0034,-0.0121,-0.0416,-0.0467,-0.1340,0.2443,-0.0153,-0.0241,0.0118,-0.0060,0.0057,0.0090,0.0028,0.0005,-0.0048,0.0062,0.0031,0.0016,0.0204,0.1300,-0.0440,0.0114,-0.0269,-0.0400,-0.0182,-0.0052,0.0311,-0.0036,-0.0038,-0.0116,-0.0086,-0.0759,0.0336,0.0317,-0.0478,0.0465,-0.0344,-0.0169,-0.0337,-0.0723,-0.0547,0.0288,0.0085,-0.0071,0.0197,0.0018,-0.5189,0.6157,0.0943,-0.0206,-0.0757,-0.0609,-0.0836,-0.0957,-0.0429,-0.0194,0.0071,0.0032,-0.1175,0.0369,1.0868,0.9952,0.0099,-0.0633,-0.0415,-0.0253,0.0322,0.0347,-0.0390,0.0059,-0.0023,-0.0675,-0.0861,-0.1399,1.2889,1.1977,0.0079,0.0805,0.0270,-0.0028,0.0182,0.0324,0.0337,0.0578,-0.0212,-0.0092,-0.0352,0.1641,1.5633,1.2907,-0.1362,0.0680,0.0634,0.0311,0.0136,0.0670,0.0899,0.0336,0.0259,0.0246,0.0564,0.3146,0.7465,0.6438,-0.0644,0.0497,0.0514,0.0732,0.0367,-0.0424,-0.0280,0.0443,0.0735,0.0774,0.1355,0.1935,0.5033,1.4463,0.0317,0.0317,0.0197,-0.0198,-0.0353,-0.0331,-0.0558,-0.0512,0.0071,0.0933,0.1400,0.0091,2.2864,0.2245,-0.1852,-0.1055,-0.0570,-0.0004,0.0305,0.0502,0.0465,0.0103,-0.0566,-0.1377,-0.1748,0.2734,0.3429,0.6302,-0.0526,0.0206,-0.0363,0.0423,0.0142,0.0009,0.0245,0.0503,0.0987,0.1195,0.3004,0.1228,-0.9555,0.0398,},
{0.3266,-0.9202,0.5030,0.2424,-0.0008,0.1464,-0.0112,-0.0510,-0.0883,0.0203,-0.1875,0.2342,-0.1910,0.0345,-0.1287,0.3972,0.3324,-0.1469,-0.0967,-0.0407,0.0093,0.0485,0.0983,0.1001,0.1155,0.0851,0.1216,0.5007,-1.1269,0.1754,0.1976,0.0627,0.0387,0.0882,0.0449,0.0083,-0.0231,-0.0187,-0.0477,-0.0293,0.0450,-0.0040,0.0457,0.2846,0.0923,0.0302,0.0636,0.0431,0.0269,0.0288,0.0046,-0.0266,-0.0123,-0.0262,-0.0073,0.1438,-0.1043,-0.1147,0.0700,-0.0256,-0.0872,-0.0429,-0.0045,-0.0289,0.0082,0.0410,0.0338,0.0042,-0.0099,0.1551,-0.1668,0.0756,-0.0103,-0.0382,-0.0696,-0.1064,-0.0593,0.1310,0.0577,-0.0025,0.0033,-0.0173,0.0602,0.2365,-0.0873,-0.0908,-0.0471,-0.0521,-0.0232,-0.0048,0.0889,0.0169,0.0592,-0.0058,-0.0337,-0.0387,0.0471,0.2759,0.3303,-0.1550,0.0661,0.0267,-0.0048,-0.0030,0.0001,-0.0196,0.0731,0.0407,0.0149,0.0180,0.0676,-0.1025,0.1751,0.3168,-0.0286,-0.0359,-0.0123,-0.0698,-0.0274,-0.0413,0.0045,0.0691,0.0422,0.0560,-0.0428,-0.1832,0.1376,0.3610,0.0294,-0.0287,-0.0460,-0.0617,-0.0816,-0.0410,0.0429,0.0486,0.0232,0.0238,-0.1187,-0.0294,0.4740,0.2017,0.0547,-0.0030,-0.0147,-0.0345,-0.0238,-0.0036,0.0297,0.0124,-0.0017,-0.1198,-0.0338,-0.0163,0.3962,0.2516,0.1068,0.0491,0.0391,0.0539,0.0361,0.0070,-0.0095,0.0387,-0.0529,-0.0650,0.0115,-0.0718,0.0130,0.2955,0.2463,0.0949,0.0674,0.0474,0.0343,0.0130,-0.0169,-0.0925,-0.0195,0.0774,0.1761,-0.2756,0.1899,-0.5302,-0.0101,-0.0841,-0.0382,-0.0670,-0.0703,-0.0753,-0.0399,0.0279,0.0838,0.0750,0.3512,0.6981,0.0075,},
{0.5550,0.1824,-0.1046,-0.3063,-0.1781,-0.2557,-0.1328,-0.0602,-0.0088,0.1682,0.3160,0.4096,0.3168,-0.3464,0.0439,-0.9208,0.1380,-0.2870,-0.1342,-0.1477,-0.1572,-0.1529,-0.1453,-0.1140,-0.1142,-0.0862,-0.3226,0.7343,0.4795,-0.2269,-0.0100,0.0724,0.0220,-0.0586,-0.0690,-0.0155,-0.0034,-0.0294,-0.0276,0.0391,-0.0117,-0.3053,0.2723,-0.0719,-0.0199,-0.0050,0.0002,0.0047,-0.0818,-0.1087,-0.0669,-0.0060,0.0195,0.0792,-0.0785,-0.0924,-0.1863,-0.0072,0.0383,0.0056,0.0322,-0.0077,-0.0731,-0.1152,-0.0346,0.0157,0.0219,-0.0112,-0.1482,-0.1783,-0.3040,0.0571,0.0063,-0.0169,-0.0314,0.0187,0.0261,-0.0268,0.0548,0.0054,0.0026,-0.0102,-0.0756,-0.2679,0.0045,-0.0794,-0.1199,-0.0225,0.0331,0.0674,-0.0078,-0.0450,0.0656,-0.0160,-0.0391,-0.0212,0.0498,-0.1963,0.5002,-0.0283,0.1961,0.1530,0.0707,0.0260,0.0295,-0.0249,0.0693,0.0715,0.0611,0.0669,-0.0799,0.0585,0.6325,-0.1191,-0.0270,0.0496,0.0242,0.0380,0.0670,0.0867,0.0525,0.0099,-0.0457,-0.0271,-0.0429,0.1780,-0.1536,0.0253,-0.0686,-0.0332,-0.0181,-0.1185,-0.0158,0.0232,-0.0261,-0.0253,0.0069,-0.0414,0.0698,0.4672,-0.4551,-0.0059,-0.0098,-0.0181,-0.0354,-0.0408,-0.0220,0.0110,0.0499,-0.0018,-0.0114,0.0190,0.0096,-0.1549,-0.2627,0.0437,-0.0422,-0.0298,-0.0236,-0.0104,-0.0112,-0.0054,0.0251,0.0672,0.0393,-0.0582,0.0379,-0.0326,0.3678,0.0903,-0.0775,0.0046,-0.0360,-0.0452,-0.0945,-0.0514,-0.1178,-0.1227,-0.1112,-0.1171,-0.2167,0.9122,-0.4787,-0.3108,-0.1572,-0.1002,-0.2459,-0.2472,-0.2208,-0.2967,-0.2566,-0.2738,-0.4406,-0.0612,-0.1086,0.0014,0.2198,},
{2.5247,0.7517,-0.7098,-0.4553,-0.0388,-0.0521,-0.3636,-0.2735,-0.0964,-0.3626,0.1140,-0.5743,-0.0884,1.3212,0.5027,0.7816,0.1185,0.0747,0.1309,0.0378,0.0086,-0.0163,-0.0447,-0.0786,-0.1811,-0.2542,-0.3256,0.3114,2.5505,0.2006,-0.1645,-0.0486,-0.0190,0.0225,-0.0602,-0.0319,-0.0046,0.0034,0.0495,0.1878,0.1534,1.0688,2.6022,-0.2544,-0.0589,-0.0337,-0.0250,0.0241,0.0007,-0.0227,-0.0043,0.0222,0.0358,0.0825,0.3521,0.2441,0.2477,-0.0011,-0.0223,-0.0019,0.0285,0.0394,-0.0064,-0.0255,-0.0008,-0.0159,-0.0094,-0.0396,0.6279,0.2986,0.0302,-0.0293,0.0006,0.0161,0.0236,0.0534,0.0549,-0.0508,-0.0861,-0.1219,-0.1257,-0.1934,0.1418,1.6061,-0.4055,-0.1367,0.1119,0.0804,0.0275,0.0566,0.0630,-0.0183,-0.0240,-0.0262,-0.0336,-0.1278,-0.2389,0.1400,0.1867,-0.0104,-0.0589,-0.0727,-0.0062,0.0119,-0.0104,-0.0128,-0.0404,-0.0043,-0.0322,-0.0102,0.1242,-0.0916,0.7002,0.0349,-0.0121,-0.0496,-0.0374,-0.0515,-0.0201,-0.0227,0.0003,0.0199,-0.0020,0.0205,-0.0322,-0.3289,1.1106,-0.0782,0.0717,0.0574,-0.0148,-0.0535,-0.0146,0.0158,0.0317,0.0047,0.0293,0.0011,0.0188,-0.2758,1.1383,-0.0556,-0.0143,0.0298,0.0499,0.0475,-0.0031,-0.0400,0.0009,0.0203,0.0123,0.0865,-0.0699,-0.1705,1.4917,-0.1738,0.0656,-0.0707,-0.0068,0.0051,0.0052,0.0135,0.0080,0.0215,0.0666,-0.0029,-0.0104,0.1648,0.2125,0.0123,0.0374,0.0167,0.0239,0.0138,0.0342,-0.0011,-0.0303,-0.0203,-0.0702,-0.0043,0.1597,0.2108,0.2702,-0.3941,0.0637,0.0186,-0.0354,-0.0039,-0.0704,-0.0538,-0.0597,-0.1303,-0.0047,-0.2221,0.4362,0.1447,0.1855,},
{-0.2916,-0.0692,-0.6920,0.2217,-0.0088,0.1844,0.4951,0.0483,0.1371,0.2841,-0.3639,-0.8491,-0.2968,-0.2264,-0.0089,0.7333,-0.5691,0.3281,0.1007,0.1696,0.1648,0.2716,0.3154,0.4441,0.4768,0.5127,0.4701,0.3876,-0.8732,-0.2435,0.0430,-0.0828,-0.0141,-0.0659,-0.0614,-0.0610,-0.0368,-0.0209,-0.0356,-0.0306,-0.0166,0.2039,-0.1961,0.0353,-0.0058,0.0062,0.0100,-0.0143,-0.0339,-0.0306,-0.0375,-0.0629,-0.0618,-0.0564,-0.0388,-0.0302,0.0036,0.0315,-0.0444,-0.0008,-0.0097,-0.0005,-0.0220,-0.0407,-0.0832,-0.0691,-0.0459,-0.0348,-0.0047,0.0477,-0.0830,0.0425,-0.0084,0.0093,-0.0012,-0.0281,0.0432,-0.0558,-0.0615,-0.0754,-0.0549,-0.0972,-0.0956,0.1691,-0.2358,0.0226,0.0016,0.0193,0.0063,0.0209,0.0454,-0.0280,0.0161,0.0142,0.0322,0.1103,0.0813,-0.6403,-0.4772,0.0793,-0.0260,0.0157,-0.0105,0.0754,-0.0372,0.0445,0.0134,-0.0265,0.0250,0.0715,0.1235,-0.5473,-0.0867,0.0040,-0.0530,-0.0185,0.0266,0.0770,-0.0568,0.0117,-0.0366,0.0285,0.0552,0.0179,-0.0193,-0.4747,-0.4076,0.0783,0.0133,-0.0171,0.0242,0.1791,0.0584,-0.0488,0.0447,0.0382,0.0089,0.0092,-0.1203,-0.3137,-0.1921,0.0503,-0.0153,-0.0093,-0.0514,0.0015,0.1270,0.1028,0.0272,0.0062,-0.0438,-0.0720,-0.0225,0.1365,-0.8102,0.0054,0.0576,0.0354,0.0727,0.0109,-0.0186,0.0093,0.0246,0.0193,0.0299,0.0235,-0.0102,-0.2864,-0.6686,-0.0598,0.0624,0.0354,0.0136,0.0260,0.0255,0.0001,-0.0126,-0.0299,-0.0398,-0.0072,-0.0918,-0.2372,0.4379,0.3389,0.3118,0.1007,0.1516,0.1143,0.1280,0.1241,0.1157,0.1836,0.0927,0.9445,0.3696,1.1577,0.0522,},
{-0.2076,1.2709,1.0200,0.3160,0.9336,0.2126,0.2414,0.2415,-0.1227,0.0207,-0.1468,-0.2159,0.2477,0.1934,-0.4968,0.2121,0.3834,-0.0189,0.0023,-0.0049,0.0253,0.0403,0.0458,0.0570,0.0695,-0.0086,0.1313,-0.1149,-0.5301,-0.1324,-0.0134,0.0143,0.0182,0.0226,-0.0076,0.0348,0.0451,0.0351,0.0512,0.0539,0.0669,0.0925,-0.2286,0.1617,0.0215,0.0538,0.0328,0.0231,0.0106,-0.0479,-0.0260,0.0058,0.0222,0.0101,0.0120,-0.0400,0.5059,0.1471,0.0192,0.0462,0.0956,0.0851,0.0756,0.0699,0.0544,0.0234,0.0118,0.0315,-0.0552,0.0515,0.4891,0.1425,0.0804,0.0225,-0.0153,-0.0135,0.0399,0.0444,0.0850,0.0425,0.0271,0.0337,-0.0163,0.0314,0.3055,0.4392,0.0204,-0.0438,-0.0345,-0.0408,-0.0531,-0.1029,0.0401,-0.0098,-0.0061,-0.0613,-0.0132,0.1521,-0.1711,0.1603,-0.0796,-0.0266,-0.0732,-0.0615,-0.0796,-0.0395,0.0333,0.0207,0.0316,0.0364,0.0012,0.1544,0.1001,0.0413,-0.0051,-0.0028,-0.0264,-0.0213,-0.0759,0.0075,0.0169,0.0054,0.0034,-0.0132,-0.0162,-0.0704,-0.1648,-0.0160,-0.0313,-0.0358,-0.0129,-0.0244,0.0025,-0.0140,-0.0459,-0.0227,-0.0260,-0.0217,-0.0016,0.0006,0.1458,-0.0090,-0.0068,-0.0205,-0.0424,-0.0210,0.0258,-0.0258,-0.0334,-0.0326,-0.0226,-0.0179,0.0124,-0.0730,-0.6316,-0.1149,-0.0656,-0.0625,-0.0345,-0.0214,-0.0368,-0.0141,-0.0439,-0.0552,-0.0486,-0.0134,-0.0875,-0.3667,-0.0695,-0.4116,0.2081,0.1206,0.0772,0.0365,0.0234,0.0287,-0.0034,-0.0424,-0.0723,-0.1763,-0.1334,-0.3822,-0.0163,-0.2076,-0.1843,0.4268,0.4688,0.4279,0.4132,0.4148,0.3365,0.1830,-0.0627,0.3305,0.0968,0.0616,0.1133,},
{-0.8027,0.4084,0.4594,0.5224,0.4408,0.2740,0.1368,0.2208,0.0697,0.1593,-0.2136,0.1321,-0.7721,0.0237,0.5235,-0.7064,0.3820,0.0280,0.0664,0.0602,0.0547,0.0005,-0.0401,-0.0205,0.0602,0.1684,-0.0325,-0.2211,0.4380,0.1825,0.0416,-0.0102,-0.0021,-0.0449,0.0036,0.0290,0.0196,-0.0142,-0.0261,-0.0794,-0.0213,0.0290,-0.2358,-0.0427,0.0021,-0.0180,-0.0052,0.0031,0.0042,0.0289,0.0156,0.0082,0.0095,0.0138,-0.0363,-0.0380,0.1365,-0.0148,0.0145,0.0361,0.0591,0.0329,-0.0273,-0.0495,-0.0395,-0.0295,0.0219,0.0837,-0.0043,0.0139,0.2035,-0.1047,0.0205,0.0517,0.0458,0.0921,0.0791,-0.0902,-0.0173,0.0694,0.0533,0.1207,0.1042,0.2398,0.5034,0.0155,0.0145,-0.0417,-0.0229,0.0041,0.1609,-0.0018,0.0302,-0.0034,0.0099,-0.0297,-0.0454,0.8146,0.2533,0.0770,-0.0653,-0.0364,-0.0758,-0.0469,0.1016,0.0471,-0.0250,-0.0545,-0.0293,-0.0466,-0.0175,0.2141,-1.0079,0.0209,0.0397,0.0051,-0.0219,0.0463,0.0964,0.0313,-0.0227,-0.0602,-0.0276,-0.0155,0.0149,-0.2166,-0.0025,-0.0556,0.0024,-0.0301,0.0784,0.1435,-0.0492,-0.0114,0.0175,-0.0141,-0.0355,0.0010,-0.0639,0.0420,-0.4524,-0.0357,-0.0294,0.0238,0.0133,-0.0032,-0.0460,-0.0509,-0.0468,-0.0321,-0.0597,0.0005,-0.0765,-0.3112,-0.8002,0.0671,-0.0696,0.0527,-0.0280,0.0484,0.1263,0.0571,0.0423,0.0425,0.0270,-0.0146,-0.0822,-0.6223,0.3569,0.2686,-0.1829,-0.0785,-0.0093,-0.0217,-0.0251,0.0478,0.0291,0.0574,0.0789,0.0779,0.0872,-0.7075,-1.0159,0.4756,-0.1027,-0.0234,-0.0604,-0.0629,-0.0341,-0.0478,0.0207,-0.0106,0.0287,0.2106,0.8853,-0.7261,-0.1468,},
{-0.6094,-0.5862,0.0765,0.1553,0.0687,0.1130,0.2517,0.2985,0.2909,0.4776,0.3252,0.9881,-0.1958,-0.0016,-0.2904,-0.3537,-0.2860,-0.0527,0.0167,-0.0639,-0.0756,-0.0342,-0.0310,-0.0504,-0.0445,0.0133,0.0961,-0.3779,-0.3666,0.0548,0.0058,0.0301,0.0131,0.0800,0.0644,-0.0375,-0.0469,0.0142,0.0052,-0.0124,0.0462,-0.1844,-0.8614,0.0060,-0.0036,-0.0315,-0.0134,-0.0302,0.0336,0.1330,0.1038,0.0086,-0.0274,-0.0803,-0.0035,-0.0101,-0.5196,-0.0177,-0.0574,-0.0428,-0.0784,-0.0197,0.0509,0.0520,0.0215,-0.0083,-0.0107,-0.0268,-0.0157,-0.0183,-0.1614,-0.0894,-0.0909,0.0002,0.0547,0.0512,-0.0519,-0.0528,0.0131,0.0168,0.0222,0.0346,-0.0302,-0.3248,-0.1701,-0.2468,0.1502,0.1076,0.0716,-0.0011,-0.0175,0.0771,0.0535,0.0718,0.0635,0.0789,0.0055,-0.4296,-0.8657,-0.0269,0.0040,-0.0308,0.0333,0.0303,0.0221,-0.0267,0.0696,-0.0194,-0.0510,-0.0801,-0.0391,0.0163,-0.4816,0.0424,-0.0281,-0.0143,0.0027,0.0564,-0.0191,-0.0436,0.0459,-0.0655,-0.0161,-0.0240,-0.0011,-0.0051,0.0568,-0.0638,-0.0267,0.0058,-0.0607,-0.0560,-0.0538,0.0012,-0.0585,-0.0393,-0.0231,-0.0024,-0.0164,-0.1252,0.0246,-0.0710,0.0177,0.0039,-0.0165,-0.0331,-0.0255,-0.0106,-0.0113,0.0133,0.0424,-0.0111,-0.0030,-0.1106,0.3812,0.0102,-0.0219,-0.0473,-0.0509,-0.0606,-0.0646,-0.0838,-0.0776,-0.1072,-0.1129,0.0198,0.0439,-0.2173,0.0528,-0.2503,-0.0286,-0.0218,0.0038,0.0201,0.0447,0.0129,0.1842,0.2738,0.3819,0.3644,0.1013,-0.4472,-0.0188,0.5240,0.4212,0.0034,-0.0076,-0.0220,0.0445,0.1065,0.0210,0.1307,0.3589,-0.5986,-0.6698,-0.0347,0.0392,},
};

int recognize(double data[]) {
	double p[10];
	for (int d = 0; d < 10; d++) {
		p[d] = 0.;
		for (int i = 0; i < N; i++) p[d] += S[d][i] * data[i];
	}

	const double pi[10] = { 0.956103,0.975972,0.807486,0.844397,0.888908,0.746357,0.930382,0.872147,0.748077,0.787527 };
	//for (int i = 0; i < 10; i++) p[i] /= sqrt(pi[i]);

	int maxi = 0; double maxv = p[0];
	for (int d = 1; d < 10; d++) {
		if (p[d] > maxv) maxv = p[d], maxi = d;
	}
	return maxi;
}



#if 1

int main() {
#ifdef __DEBUG
	freopen("stdin.dat", "r", stdin);
#endif
	std::ios_base::sync_with_stdio(false); std::cin.tie(NULL); std::cout.tie(NULL);

	int T; std::cin >> T; while (T--) {
		double input[28][28];
		for (int v = 0; v < 28; v++) for (int u = 0; u < 28; u++) std::cin >> input[v][u];

		double data[N];
		if (M == 28) {
			for (int v = 0; v < 28; v++) for (int u = 0; u < 28; u++) data[v*M + u] = input[v][u];
		}
		else if (M == 14) {
			for (int v = 0; v < 28; v += 2) for (int u = 0; u < 28; u += 2)
				data[(v / 2)*M + (u / 2)] = 0.25*(input[v][u] + input[v][u + 1] + input[v + 1][u] + input[v + 1][u + 1]);
		}
		if (N & 1) data[N - 1] = 1.;

		printf("%d\n", recognize(data));
	}

	return 0;
}

#else

int main() {
	std::vector<mnist_img> mnist[10];
	for (int d = 0; d < 10; d++) {
		loadData(MNIST_TRAIN_FILES[d], mnist[d]);
	}
	double accuracy[10];
	for (int d = 0; d < 10; d++) {
		accuracy[d] = 0.;
		int TN = mnist[d].size();
		for (int i = 0; i < TN; i++) {
			double data[N];
			for (int v = 0; v < M*M; v++) data[v] = (&mnist[d][i].data[0][0])[v];
			if (N & 1) data[N - 1] = 1.;
			accuracy[d] += double(recognize(data) == d) / TN;
		}
	}
	double acc = 0.;
	for (int i = 0; i < 10; i++) {
		printf("%lf,", accuracy[i]);
		acc += 0.1*accuracy[i];
	}
	printf("\nAccuracy: %lf\n", acc);
	return 0;
}
#endif



#endif  // TRAIN
